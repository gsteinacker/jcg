JCG - The Java Code Generator


==> THIS IS WORK IN PROGRESS AND CURRENTLY HARDLY USABLE. THIS WILL HOPEFULLY BE
==> CHANGED IN THE NEXT COUPLE OF DAYS.

===================================================================================================
Change History:
===================================================================================================

---------------------------------------------------------------------------------------------------
Release 0.1: Basics
---------------------------------------------------------------------------------------------------
ID      Prio    Description
---------------------------------------------------------------------------------------------------
01        1     Change the transformation process, so Types are transformed, not models.
                ModelTransformer => TypeTransformer.
02        1     Defined some jcg annotations to configure the transformation process: Mutable,
                Immutable define the transformation in order to make generated classes (im)mutable.
                In addition to that, TransformWith was introduced. This annotation selects a
                configurable transformer chain to transform the annotated class.
10        1     Implemented method bodies, including the generation of setter, getter
                and constructor bodies. Open issue: the bodies generated by AddGetters and so on
                is using fully qualified names (java.util.Collections, ...) because otherwise the
                code would not be compilable. This has to be changed in the future, because the
                code is ugly this way... (see #17)
12        1     Implemented a FileGenerator
14        3     Refactoring of the Rules and Predicates.

===================================================================================================
Open Issues:
===================================================================================================

---------------------------------------------------------------------------------------------------
Release 0.1: Basics
---------------------------------------------------------------------------------------------------
ID      Prio    Description
---------------------------------------------------------------------------------------------------
11        1     Implement generic types.
13        2     Remove unused code
15        1     Implement support for arrays
16        1     Implement comments.
17        2     The bodies generated by AddGetters and so on
                are using fully qualified names (java.util.Collections, ...) because otherwise the
                code would not be compilable. This has to be changed in the future, because the
                code is ugly this way...

---------------------------------------------------------------------------------------------------
Release 0.2: More transformers, Simplified transformer chain configuration
             Release 0.2 is intended to be usable to generate simple domain models. In the following
             releases, the feature-set will be completed, so more interesting things can be generated.
---------------------------------------------------------------------------------------------------
ID      Prio    Description
---------------------------------------------------------------------------------------------------
20        2     Write a transformer to add different kinds of Builders
22        2     Write more transformers to add interfaces, abstract classes (so you are able to add
                your own stuff to a generated class), enums and annotation types.
23        2     Write and use a configurable CodeFormatter. Parameter-lists, for example, do not
                yet consider line-widths right now.
24        2     Implement EqualsAndHashcode Transformer
25        2     Implement ToString Transformer
26        2     Implement Transformers to generate Interfaces and Enumerations
27        2     Implement support for inheritance: Customer IS-A Person => Either an
                AbstractPerson, or a Person interface is generated.
28        2     Implement transformer-chain configurations using (type or package-level) a
                nnotations.

---------------------------------------------------------------------------------------------------
Release 0.3: Complete the feature set
---------------------------------------------------------------------------------------------------
ID      Prio    Description
---------------------------------------------------------------------------------------------------
30        3     Parse method bodies. In contrast to issue 01, method bodies are not only part of
                the model and generated by the templates, but also parsed by the parser. This is
                a prerequisite for merging generated code with manipulated code.
31        3     Annotations currently only provide String parameters, no arrays or other types.
32        3     Write JavaDocs
33        3     Write unit tests
34        3     Parse existing comments.

---------------------------------------------------------------------------------------------------
Release 0.4: Refactoring
---------------------------------------------------------------------------------------------------
ID      Prio    Description
---------------------------------------------------------------------------------------------------
40        3     Simplify the configuration of the transformers, for example by using a DSL or
                Spring namespaces.

---------------------------------------------------------------------------------------------------
Release 0.5: Support manual changes of generated code
---------------------------------------------------------------------------------------------------
ID      Prio    Description
---------------------------------------------------------------------------------------------------
50        3     Implementing merging of models with focus on merging manual changes into generated code.

---------------------------------------------------------------------------------------------------
Unspecified:
---------------------------------------------------------------------------------------------------
ID      Prio    Description
---------------------------------------------------------------------------------------------------
          4     Add Transformers + Generators for XML/XSD/WSDL
          5     Use Xtext (http://www.eclipse.org/Xtext/) to generate more sophisticated things.
          3     XML/JAXB support, generation of XSDs.
          3     Add configurable Comparators to define the sorting of fields, methods, imports, ...


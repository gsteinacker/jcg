===================================================================================================
Open Issues:
===================================================================================================

---------------------------------------------------------------------------------------------------
Release 0.1: Basics
             Release 0.1 will be the foundation of the project: a Java parser, usable to parse most
             kinds of Java code; a simple domain model, that is intended to be an abstraction for
             (primarily Java) sources with a focus on code transformation and generation; and a
             code-generating facility to generate code.
---------------------------------------------------------------------------------------------------
ID      Prio    Description
---------------------------------------------------------------------------------------------------
11        1     Implement generic types.
13        2     Remove unused code and debugging output (especially to System.out)
15        1     Implement support for arrays in fields and parameters.
16        1     Implement generation of useful comments, including descriptions from the glossary.
21        2     Parsing + generation of interfaces
22        2     Parsing + generation of enums
23        4     Parsing + generation of annotations
24        2     Parsing, transformation + generation of thrown exceptions (=> methods)
25        3     Support nested types
26        2     Initialization blocks (static and non-static).
27        3     Parsing + generation of nested classes.
28        3     Parsing + generation of inheritance (incl. implementation of interfaces).

---------------------------------------------------------------------------------------------------
Release 0.2: More transformers
             Release 0.2 is intended to be usable to generate simple domain models. The aim is,
             that the generated code is looking similar to hand-written code.
             In the following releases (starting with 0.3), the feature-set will be completed, so
             more interesting things can be generated.
---------------------------------------------------------------------------------------------------
ID      Prio    Description
---------------------------------------------------------------------------------------------------
40        2     Write a transformer to add different kinds of Builders. This includes a facility
                to split the transformation process, so one class may be used to generate multiple
                artifacts.
42        2     Write more transformers to add interfaces, abstract classes (so you are able to add
                your own stuff to a generated class), enums and annotation types.
44        2     Implement EqualsAndHashcode Transformer
45        2     Implement ToString Transformer
46        2     Implement Transformers to generate Interfaces and Enumerations
47        2     Implement support for inheritance: Customer IS-A Person => Either an
                AbstractPerson, or a Person interface is generated.
48        2     Implement transformer-chain configurations using (type or package-level) a
                nnotations.

---------------------------------------------------------------------------------------------------
Release 0.3 (0.4?): Code Generation
---------------------------------------------------------------------------------------------------
ID      Prio    Description
---------------------------------------------------------------------------------------------------
61        3     Parse existing comments.
62        2     Add support for bean validation (JSR 303): Generate Builders that validate beans,
                Add validation to constructors for classes that do not have a builder, add
                'validate' method(?).
63        2     Types and constants in Annotation (like @X (style=Foo.class)) or
                @Immutable(style=Foo.BUILDER) in generated code currently contain the fully
                qualified name of the type/constant. This works, but is ugly => remove the
                qualification and generate an import statement.
64        2     The bodies generated by AddGetters and so on
                are using fully qualified names (java.util.Collections, ...) because otherwise the
                code would not be compilable. This has to be changed in the future, because the
                code is ugly this way...
65        2     Write and use a configurable CodeFormatter. Parameter-lists, for example, do not
                yet consider line-widths right now.
66        2     Implement configurable code generators for different constructs. This will involve
                some refactorings.
67        2     The types used in the parsed method bodies are not yet added to the list of
                imports.

---------------------------------------------------------------------------------------------------
Release 0.4 (0.3?): Doing Homework
---------------------------------------------------------------------------------------------------
ID      Prio    Description
---------------------------------------------------------------------------------------------------
81        3     Add missing JavaDocs to jcg sources
82        3     Add missing unit tests to jcg sources
83        3     Add some documentation
20        4     Add some examples illustrating the current features
84        3     Simplify the configuration of the transformers. Separate the transformer
                configuration from the rest of the config, provide a facility to extend the
                transformer configuration.
85        2     Provide a build.xml to build the sources.
86        2     Ant integration with examples on how to transform code using Ant.

---------------------------------------------------------------------------------------------------
Release 0.5: Support manual changes of generated code
---------------------------------------------------------------------------------------------------
ID      Prio    Description
---------------------------------------------------------------------------------------------------
100       3     Implementing merging of models with focus on merging manual changes into generated code.

---------------------------------------------------------------------------------------------------
Unspecified:
---------------------------------------------------------------------------------------------------
ID      Prio    Description
---------------------------------------------------------------------------------------------------
          4     Add Transformers + Generators for XML/XSD/WSDL
          5     Use Xtext (http://www.eclipse.org/Xtext/) to generate more sophisticated things.
          3     XML/JAXB support, generation of XSDs.
          3     Add configurable Comparators to define the sorting of fields, methods, imports, ...
          5     Implement IDE integration like a Plugin (Generate a folder, a package or a single class)
